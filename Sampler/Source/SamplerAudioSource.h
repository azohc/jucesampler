/*
  ==============================================================================

    SamplerAudioSource.h
    Created: 27 Mar 2020 9:20:18am
    Author:  azohc

  ==============================================================================
*/

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"
#include "Constants.h"
#include "SamplerSynthVoice.h"
#include "SamplerSynthSound.h"


//==============================================================================
/*
*/
class SamplerAudioSource    : public AudioSource
{
public:    
    SamplerAudioSource (MidiKeyboardState& keyState) : keyboardState (keyState)
    {
        synth.addVoice (new SamplerVoice());    // and these ones play the sampled sounds
        synth.addVoice (new SamplerVoice());    // and these ones play the sampled sounds
    }

    void makeSoundsFromChops(AudioFormatReader* formatReader, ValueTree chopTree)
    {
        for (auto i = 0; i < chopTree.getNumChildren(); ++i) {
            Chop chop (chopTree.getChild(i));
            int startSample = chop.getStartSample();
            int endSample = chop.getEndSample();
            int rootNote = chop.getTriggerNote();
            auto audioSSReader = new AudioSubsectionReader (formatReader, startSample, endSample - startSample, false);

            BigInteger singleNote;
            singleNote.setBit(rootNote); // TODO map midi notes (todo transpose -12) with integer keys. midi learn
            Logger::getCurrentLogger()->writeToLog(String (chop.getId()) + " at " + singleNote.toString(10));

            synth.clearSounds();
            synth.addSound (new SamplerSound (String (chop.getId()), // ALL PARAMS IN SECONDS
                                              *audioSSReader,
                                              singleNote,     // notes the sound is triggered by
                                              rootNote,       // root note
                                              0.1,            // attack time
                                              0.1,            // release time
                                              chop.getEndTime() - chop.getStartTime() // maximum sample length
                                              ));
            delete audioSSReader;
        }
    }

    void prepareToPlay (int /*samplesPerBlockExpected*/, double sampleRate) override
    {
        midiCollector.reset (sampleRate);
        synth.setCurrentPlaybackSampleRate (sampleRate);
    }

    void releaseResources() override {}

    void getNextAudioBlock (const AudioSourceChannelInfo& bufferToFill) override
    {
        // the synth always adds its output to the audio buffer, so we have to clear it
        // first..
        bufferToFill.clearActiveBufferRegion();

        // fill a midi buffer with incoming messages from the midi input.
        MidiBuffer incomingMidi;
        midiCollector.removeNextBlockOfMessages (incomingMidi, bufferToFill.numSamples);

        // pass these messages to the keyboard state so that it can update the component
        // to show on-screen which keys are being pressed on the physical midi keyboard.
        // This call will also add midi messages to the buffer which were generated by
        // the mouse-clicking on the on-screen keyboard.
        keyboardState.processNextMidiBuffer (incomingMidi, 0, bufferToFill.numSamples, true);

        // and now get the synth to process the midi events and generate its output.
        synth.renderNextBlock (*bufferToFill.buffer, incomingMidi, 0, bufferToFill.numSamples);
    }

    // TODO COPIED from Projucer Synth tutorial
    // this collects real-time midi messages from the midi input device, and
    // turns them into blocks that we can process in our audio callback
    MidiMessageCollector midiCollector;


private:

    // this represents the state of which keys on our on-screen keyboard are held
    // down. When the mouse is clicked on the keyboard component, this object also
    // generates midi messages for this, which we can pass on to our synth.
    MidiKeyboardState& keyboardState;

    // the synth itself!
    Synthesiser synth;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SamplerAudioSource)
};
